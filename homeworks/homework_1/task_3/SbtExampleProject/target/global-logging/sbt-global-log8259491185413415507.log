[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\senio\AppData\Local\Temp\idea3.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\senio\AppData\Local\Temp\idea3.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Amazon.com Inc. Java 1.8.0_402)
[debug] Load.defaultLoad until apply took 58.4421ms
[debug]           Load.loadUnit: plugins took 122.4881ms
[debug]           Load.loadUnit: defsScala took 0.4425ms
[debug] [Loading] Scanning directory C:\Users\senio\IdeaProjects\SbtExampleProject\project
[debug]             Load.loadUnit: mkEval took 10.1566ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\senio\IdeaProjects\SbtExampleProject\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.2044 ms
[info] loading settings for project sbtexampleproject-build from idea3.sbt ...
[debug]               Load.resolveProject(sbtexampleproject-build) took 35.1967ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sbtexampleproject-build, base: C:\Users\senio\IdeaProjects\SbtExampleProject\project, plugins: List(<none>))) took 51.7615ms
[debug] [Loading] Done in C:\Users\senio\IdeaProjects\SbtExampleProject\project, returning: (sbtexampleproject-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1568.3138ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.1345ms
[debug]         Load.loadUnit(file:/C:/Users/senio/IdeaProjects/SbtExampleProject/project/, ...) took 1699.9863ms
[debug]       Load.apply: load took 1776.7993ms
[debug]       Load.apply: resolveProjects took 4.2993ms
[debug]       Load.apply: finalTransforms took 40.1315ms
[debug]       Load.apply: config.delegates took 4.6963ms
[debug]       Load.apply: Def.make(settings)... took 218.5128ms
[debug]       Load.apply: structureIndex took 56.9606ms
[debug]       Load.apply: mkStreams took 1.6136ms
[info] loading project definition from C:\Users\senio\IdeaProjects\SbtExampleProject\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3356.4529ms
[debug]     Load.loadUnit: defsScala took 0.0016ms
[debug] [Loading] Scanning directory C:\Users\senio\IdeaProjects\SbtExampleProject
[debug]       Load.loadUnit: mkEval took 0.1567ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.6603 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 22.0413ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\senio\IdeaProjects\SbtExampleProject, plugins: List(<none>))) took 24.8953ms
[debug] [Loading] Done in C:\Users\senio\IdeaProjects\SbtExampleProject, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 669.2934ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.9241ms
[debug]   Load.loadUnit(file:/C:/Users/senio/IdeaProjects/SbtExampleProject/, ...) took 4030.8074ms
[debug] Load.apply: load took 4043.7054ms
[debug] Load.apply: resolveProjects took 0.1902ms
[debug] Load.apply: finalTransforms took 19.1043ms
[debug] Load.apply: config.delegates took 0.2065ms
[debug] Load.apply: Def.make(settings)... took 50.9157ms
[debug] Load.apply: structureIndex took 15.8738ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to SbtExampleProject (in build file:/C:/Users/senio/IdeaProjects/SbtExampleProject/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 62692 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 62692, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SbtExampleProject (in build file:/C:/Users/senio/IdeaProjects/SbtExampleProject/)
[debug] > Exec(idea-shell, None, None)
